#!/usr/bin/env python3

import os
import pathlib
import re
import socket
import subprocess
import sys

import click

DIR = pathlib.Path(__file__).parent.absolute()

KUBECTL = os.path.expandvars("$SNAP/microk8s-kubectl.wrapper")
HELM = os.path.expandvars("$SNAP/microk8s-helm3.wrapper")
MICROK8S_STATUS = os.path.expandvars("$SNAP/microk8s-status.wrapper")
MICROK8S_ENABLE = os.path.expandvars("$SNAP/microk8s-enable.wrapper")


def ensure_addon(addon_name: str):
    click.echo("Checking for addon {}...".format(addon_name))
    output = subprocess.check_output(
        [MICROK8S_STATUS, "-a", addon_name]).decode()
    if "enabled" not in output:
        p = subprocess.run([MICROK8S_ENABLE, addon_name])
        if p.returncode != 0:
            click.echo("Failed to enable addon {}".format(
                addon_name), err=True)
            sys.exit(1)

    click.echo("Checking for addon {}... OK".format(addon_name))


@click.command()
@click.option("--enable-ee", is_flag=True, default=False)
@click.option("--helm3-addon", default="core/helm3")
@click.option("--dns-addon", default="core/dns")
@click.option("--rbac-addon", default="core/rbac")
@click.option("--ingress-addon", default="core/ingress")
@click.option("--metric-server-addon", default="core/metrics-server")
@click.option("--storage-addon", default="core/hostpath-storage")
@click.option('--storage-class', default=None)
def main(
    helm3_addon: str,
    dns_addon: str,
    rbac_addon: str,
    ingress_addon: str,
    metric_server_addon: str,
    storage_addon: str,
    enable_ee: bool,
    storage_class: str,
):

    if dns_addon:
        ensure_addon(dns_addon)
    
    if helm3_addon:
        ensure_addon(helm3_addon)
    
    if rbac_addon:
        ensure_addon(rbac_addon)
        
    if ingress_addon:
        ensure_addon(ingress_addon) 
    
    if metric_server_addon:
        ensure_addon(metric_server_addon)
    
    subprocess.run([HELM, "repo", "add", "portainer",
                   "https://portainer.github.io/k8s/"])
    subprocess.run([HELM, "repo", "update"])
    # Create portainer namespace. Ignore failures (e.g. if namespace exists)
    subprocess.run([KUBECTL, "create", "namespace", "portainer"])
   # storageclass= subprocess.check_output([KUBECTL, "get", "sc", "|", "grep", "default", "|", "awk",  "{print $1}"])
    args = []
    if enable_ee:
        args.extend(["--set", "enterpriseEdition.enabled=true"])

    if storage_class is not None:
        args.extend(
            ["--set", "persistence.storageClass={}".format(storage_class)])
    else:
        ensure_addon(storage_addon)

    subprocess.run([HELM, "install", "-n", "portainer", "portainer", "portainer/portainer", *args])

    click.echo(
        f"""
=============================================================
Portainer has been installed and will be available shortly. Use the Nodeport or LB port to access.
"""
    )


if __name__ == "__main__":
    main()
